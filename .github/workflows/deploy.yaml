name: Django CI/CD

'on':
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # Replace with your Python version

      # - name: Install dependencies
      #   run: |
      #     sudo apt install python3.12-venv
      #     python -m venv env
      #     . env/bin/activate
      #     pip install -r vaccine_site/requirements.txt

      - name: SSH Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ ! -d "${{ secrets.PROJECT_DIR }}/.git" ]; then
                # If not a git repository, clone the repo
                rm -rf ${{ secrets.PROJECT_DIR }}  # Remove any existing non-git directory
                git clone https://github.com/eltinawh/vaccine-scheduling-application.git ${{ secrets.PROJECT_DIR }}
            else
                cd ${{ secrets.PROJECT_DIR }}
                git pull origin main
            fi

            cd vaccine_site
            sudo > .env
            echo "DEBUG=${{ secrets.DEBUG }}" | sudo tee -a .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" | sudo tee -a .env
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" | sudo tee -a .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" | sudo tee -a .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" | sudo tee -a .env
            echo "DB_USER=${{ secrets.DB_USER }}" | sudo tee -a .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" | sudo tee -a .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" | sudo tee -a .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" | sudo tee -a .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | sudo tee -a .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo tee -a .env
            echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" | sudo tee -a .env

            cd ${{ secrets.PROJECT_DIR }}
            sudo apt install -y libpq-dev python3.12-venv
            python3 -m venv venv
            source venv/bin/activate
            pip install -r vaccine_site/requirements.txt
            
            pip install gunicorn
            sudo cp deploy_config/gunicorn.service /etc/systemd/system/gunicorn.service
            sudo cp deploy_config/gunicorn.socket /etc/systemd/system/gunicorn.socket
            sudo systemctl daemon-reload
            sudo systemctl enable gunicorn.socket
            sudo systemctl start gunicorn.socket
            
            sudo apt install -y nginx
            if [ -f "/etc/nginx/sites-available/default" ]; then
                sudo rm /etc/nginx/sites-available/default
            fi
            if [ -f "/etc/nginx/sites-enabled/default" ]; then
                sudo rm /etc/nginx/sites-enabled/default
            fi
            sudo cp deploy_config/nginx.conf /etc/nginx/sites-available/django
            sudo ln -sf /etc/nginx/sites-available/django /etc/nginx/sites-enabled
            sudo nginx -t
            sudo systemctl restart nginx

            cd vaccine_site
            source ../venv/bin/activate
            python manage.py migrate
            python manage.py collectstatic --noinput
            sudo systemctl restart gunicorn